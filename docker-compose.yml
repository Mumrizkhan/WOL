version: '3.8'

services:
  # ============================================================================
  # Infrastructure Services
  # ============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: wol-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wol_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wol-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: wol-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/init-mongodb.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - wol-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wol-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wol-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: wol-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - wol-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # API Gateway (Ocelot)
  # ============================================================================
  
  api-gateway:
    build:
      context: ./src/ApiGateway
      dockerfile: Dockerfile
    container_name: wol-api-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
      - Jwt__Issuer=https://api.wol.sa
      - Jwt__Audience=https://api.wol.sa
    ports:
      - "5000:5000"
    depends_on:
      - identity-service
      - booking-service
      - vehicle-service
      - pricing-service
      - tracking-service
      - payment-service
    networks:
      - wol-network
    restart: unless-stopped

  # ============================================================================
  # Microservices
  # ============================================================================

  # Identity Service
  identity-service:
    build:
      context: ./src/Services/Identity
      dockerfile: WOL.Identity.API/Dockerfile
    container_name: wol-identity-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_identity;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
      - Jwt__Issuer=https://api.wol.sa
      - Jwt__Audience=https://api.wol.sa
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Booking Service
  booking-service:
    build:
      context: ./src/Services/Booking
      dockerfile: WOL.Booking.API/Dockerfile
    container_name: wol-booking-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5002
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_booking;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Vehicle Service
  vehicle-service:
    build:
      context: ./src/Services/Vehicle
      dockerfile: WOL.Vehicle.API/Dockerfile
    container_name: wol-vehicle-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5003
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_vehicle;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Pricing Service
  pricing-service:
    build:
      context: ./src/Services/Pricing
      dockerfile: WOL.Pricing.API/Dockerfile
    container_name: wol-pricing-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5004
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_pricing;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Backload Service
  backload-service:
    build:
      context: ./src/Services/Backload
      dockerfile: WOL.Backload.API/Dockerfile
    container_name: wol-backload-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5005
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_backload;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Tracking Service
  tracking-service:
    build:
      context: ./src/Services/Tracking
      dockerfile: WOL.Tracking.API/Dockerfile
    container_name: wol-tracking-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5006
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_tracking;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5006:5006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./src/Services/Payment
      dockerfile: WOL.Payment.API/Dockerfile
    container_name: wol-payment-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5007
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_payment;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5007:5007"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./src/Services/Notification
      dockerfile: WOL.Notification.API/Dockerfile
    container_name: wol-notification-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5008
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=wol_notifications
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5008:5008"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Document Service
  document-service:
    build:
      context: ./src/Services/Document
      dockerfile: WOL.Document.API/Dockerfile
    container_name: wol-document-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5009
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_document;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5009:5009"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Compliance Service
  compliance-service:
    build:
      context: ./src/Services/Compliance
      dockerfile: WOL.Compliance.API/Dockerfile
    container_name: wol-compliance-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5010
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=wol_compliance;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5010:5010"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./src/Services/Analytics
      dockerfile: WOL.Analytics.API/Dockerfile
    container_name: wol-analytics-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5011
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=wol_analytics
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5011:5011"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

  # Reporting Service
  reporting-service:
    build:
      context: ./src/Services/Reporting
      dockerfile: WOL.Reporting.API/Dockerfile
    container_name: wol-reporting-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5012
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=wol_reports
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jwt__SecretKey=${JWT_SECRET_KEY:-your-secret-key-min-32-characters-long}
    ports:
      - "5012:5012"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - wol-network
    restart: unless-stopped

# ============================================================================
# Networks
# ============================================================================

networks:
  wol-network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
